package com.capstone.hearingtest;

import android.app.Activity;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;

public class PlayFrequency {
	// private static final int duration = 3; // seconds
	// private static final int sampleRate = 8000;
	// private static final int numSamples = duration * sampleRate;
	// private static final double sample[] = new double[numSamples];
	// private static final double freqOfTone = 1440; // hz
	// private static byte[] generatedSnd = new byte[2 * numSamples];

	// private byte[] generatedSnd; //= new byte[2 * numSamples];
	// private final int sampleRate = 8000;

	private static int duration; // seconds

	private static int sampleRate;
	private static int numSamples;
	private static double sample[];
	private static double freqOfTone; // hz
	private static byte[] generatedSnd;

	// private byte[] generatedSnd; //= new byte[2 * numSamples];
	// private final int sampleRate = 8000;

	Handler handler = new Handler();

	private static void setVars(int d, int f) {
		duration = d; // seconds
		sampleRate = 8000;
		numSamples = duration * sampleRate;
		sample = new double[numSamples];
		freqOfTone = 1440; // hz
		generatedSnd = new byte[2 * numSamples];
	}

	/**
	 * 
	 * @param dur
	 * @param freq
	 */
	public static void genTone(int dur, int freq) {

		setVars(dur, freq);

		// fill out the array
		for (int i = 0; i < numSamples; ++i) {
			sample[i] = Math.sin(2 * Math.PI * i / (sampleRate / freqOfTone));
		}
		// convert to 16 bit pcm sound array
		// assumes the sample buffer is normalized.
		int idx = 0;
		for (final double dVal : sample) {
			// scale to maximum amplitude
			final short val = (short) ((dVal * 32767));
			// in 16 bit wav PCM, first byte is the low order byte
			generatedSnd[idx++] = (byte) (val & 0x00ff);
			generatedSnd[idx++] = (byte) ((val & 0xff00) >>> 8);
		}
	}

	public static void playSound() {
		final AudioTrack audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
				sampleRate, AudioFormat.CHANNEL_CONFIGURATION_MONO,
				AudioFormat.ENCODING_PCM_16BIT, generatedSnd.length,
				AudioTrack.MODE_STATIC);
		audioTrack.write(generatedSnd, 0, generatedSnd.length);
		audioTrack.play();
		Log.d("Main", "played");
	}

}
