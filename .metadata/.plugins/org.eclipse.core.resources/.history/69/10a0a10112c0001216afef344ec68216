/*
 * This class records audio from the device's mic to a buffer and uses AudioTrack to play that buffer.
 */

package com.capstone.hearingtest;

import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.media.audiofx.Equalizer;
import android.media.audiofx.NoiseSuppressor;
import android.media.audiofx.PresetReverb;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;
import android.widget.ToggleButton;
import android.widget.ViewSwitcher;

public class AudioTrackTest extends Activity {
	private static final String LOG_TAG = "AudioRecordTest";
	// private static String mFileName = null;
	private Context ctx = this;
	private ToggleButton mRecordButton = null;
	private MediaPlayer mPlayer = null;
	private Boolean isRecording = null;
	private Equalizer mEqualizer;
	private LinearLayout mLinearLayout;

	private int freq = 44100;
	private AudioRecord audioRecord = null;
	private Thread Rthread = null;
	private Thread Wthread = null;

	private AudioManager audioManager = null;
	private AudioTrack audioTrack = null;
	byte[] buffer = new byte[freq];
	public static final int AUDIO_ENCODING = AudioFormat.ENCODING_PCM_16BIT;

	// The different audio codecs
	// int AAC AAC Low Complexity (AAC-LC) audio codec
	// int AAC_ELD Enhanced Low Delay AAC (AAC-ELD) audio codec
	// int AMR_NB AMR (Narrowband) audio codec
	// int AMR_WB AMR (Wideband) audio codec
	// int DEFAULT
	// int HE_AAC High Efficiency AAC (HE-AAC) audio codec
	private int AudioCodec = MediaRecorder.AudioEncoder.AMR_WB;
	private ViewSwitcher viewSwitcher;
	private LinearLayout myFirstView;
	private LinearLayout mySecondView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.listen);
		mRecordButton = (ToggleButton) findViewById(R.id.tbtn_record);
		// mLinearLayout = (LinearLayout) findViewById(R.id.ll_EQ);
		if (Build.VERSION.SDK_INT < 10)
			AudioCodec = MediaRecorder.AudioEncoder.AMR_NB;
		// else if(Build.VERSION.SDK_INT >= 16)
		// AudioCodec = MediaRecorder.AudioEncoder.HE_AAC;

		// mFileName =
		// Environment.getExternalStorageDirectory().getAbsolutePath();
		// mFileName += "/audiorecordtest.3gp";

		// = create();

		mRecordButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				Log.d(LOG_TAG, mRecordButton.isChecked() + " rec btn");
				// onRecord(mRecordButton.isChecked());
				if (isRecording == null) {
					isRecording = true;
					Start();
				} else if (isRecording) {
					isRecording = false;
					// Rthread.interrupt();
					// audioTrack.stop();
				} else {
					isRecording = true;
					// Rthread.notify();
					// Rthread.start();// = null;
					// Start();
					// audioTrack.play();
				}
			}
		});

		final ToggleButton btn_preset_1 = (ToggleButton) findViewById(R.id.btn_preset_1);
		final ToggleButton btn_preset_2 = (ToggleButton) findViewById(R.id.btn_preset_2);
		final ToggleButton btn_preset_3 = (ToggleButton) findViewById(R.id.btn_preset_3);
		btn_preset_3.setVisibility(ToggleButton.GONE);
		btn_preset_1.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
				if (btn_preset_1.isChecked())
					resetEQ();
				else {
					short bands = mEqualizer.getNumberOfBands();
					final short minEQLevel = mEqualizer.getBandLevelRange()[0];
					final short maxEQLevel = mEqualizer.getBandLevelRange()[1];
					Log.i(LOG_TAG, "minEQLevel: " + minEQLevel);
					Log.i(LOG_TAG, "maxEQLevel: " + maxEQLevel);

					for (short i = 0; i < bands; i++) {
						final short band = i;
						Log.d("AFX", "band: " + band + "");

						mEqualizer.setBandLevel(band,
								(short) (maxEQLevel * (1.00)));
					}
				}
			}
		});
		btn_preset_2.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
				if (btn_preset_2.isChecked())
					resetEQ();
				else {
					short bands = mEqualizer.getNumberOfBands();
					final short minEQLevel = mEqualizer.getBandLevelRange()[0];
					final short maxEQLevel = mEqualizer.getBandLevelRange()[1];
					for (short i = 0; i < bands; i++) {
						final short band = i;
						mEqualizer.setBandLevel(band,
								(short) (maxEQLevel * (0.00)));
					}
				}
			}
		});

		viewSwitcher = (ViewSwitcher) findViewById(R.id.vs_presets_eq);
		myFirstView = (LinearLayout) findViewById(R.id.view_presets);
		mySecondView = (LinearLayout) findViewById(R.id.view_eq);
		final Button btn_eq = (Button) findViewById(R.id.btn_eq);
		btn_eq.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
				Log.d("About", "view: " + v);
				if (viewSwitcher.getCurrentView() != myFirstView) {
					viewSwitcher.showPrevious();
				} else if (viewSwitcher.getCurrentView() != mySecondView) {
					viewSwitcher.showNext();
					syncEqBars();
				}
			}
		});

//		OnSeekBarChangeListener osbcl = (new SeekBar.OnSeekBarChangeListener() {
//			public void onProgressChanged(SeekBar seekBar, int progress,
//					boolean fromUser) {
//				mEqualizer.setBandLevel(band, (short) (progress + minEQLevel));
//				// Log.d("EQ", "band: "+band+"  prog:"+progress);
//
//			}
//
//			public void onStartTrackingTouch(SeekBar seekBar) {
//			}
//
//			public void onStopTrackingTouch(SeekBar seekBar) {
//				Log.d("EQ", "band: " + band + "  prog:" + seekBar.getProgress());
//
//			}
//		});
//
//		SeekBar sb = (SeekBar) findViewById(R.id.sb_1);
//		sb.setOnSeekBarChangeListener(osbcl);

	}
	
	private void syncEqBars(){
		short bands = mEqualizer.getNumberOfBands();
		final short minEQLevel = mEqualizer.getBandLevelRange()[0];
		final short maxEQLevel = mEqualizer.getBandLevelRange()[1];
		Log.i(LOG_TAG, "minEQLevel: " + minEQLevel);
		Log.i(LOG_TAG, "maxEQLevel: " + maxEQLevel);

		for (short i = 0; i < bands && i < 5; i++) {
			final short band = i;
			Log.d("AFX", "band: " + band + "");

			// Log.i(LOG_TAG, "band: "+band+" "+mEqualizer.);
			SeekBar bar = null;
			switch (i) {
			case 0:
				bar = (SeekBar) findViewById(R.id.sb_1);
				break;
			case 1:
				bar = (SeekBar) findViewById(R.id.sb_2);
			case 2:
				bar = (SeekBar) findViewById(R.id.sb_3);
				break;
			case 3:
				bar = (SeekBar) findViewById(R.id.sb_4);
				break;
			case 4:
				bar = (SeekBar) findViewById(R.id.sb_5);
				break;
			}
			Log.d("EQ", "band level; "+band+" = "+mEqualizer.getBandLevel(band));
		bar.setProgress(mEqualizer.getBandLevel(band));
		}
		
	}
	
	private void resetEQ() {
		short bands = mEqualizer.getNumberOfBands();
		final short maxEQLevel = mEqualizer.getBandLevelRange()[1];
		for (short i = 0; i < bands; i++) {
			final short band = i;
			Log.d("AFX", "band: " + band + "");
			mEqualizer.setBandLevel(band, (short) (maxEQLevel * (0.50)));
		}
	}

	protected void Start() {
		loopback();
	}

	protected void loopback() {

		android.os.Process
				.setThreadPriority(android.os.Process.THREAD_PRIORITY_URGENT_AUDIO);
		final int bufferSize = AudioRecord.getMinBufferSize(freq,
				AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
		Log.i(LOG_TAG, "BufferSize: " + bufferSize);

		audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC, freq,
				AudioFormat.CHANNEL_IN_MONO, AudioCodec, bufferSize);
		// Log.i("AudioTrackTest",
		// "NoiseSuppressor.isAvailable() = "+NoiseSuppressor.isAvailable());
		// if(NoiseSuppressor.isAvailable()){
		// try{
		// NoiseSuppressor.create(audioRecord.getAudioSessionId());
		// }catch(Exception e){
		// Log.e("AudioTrackTest", "NS error: "+e.toString());
		// }
		// }
		// ENCODING_PCM_16BIT
		audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC, freq,
				AudioFormat.CHANNEL_OUT_MONO, AudioCodec, bufferSize,
				AudioTrack.MODE_STREAM);

		audioTrack.setPlaybackRate(freq);
		final byte[] buffer = new byte[bufferSize];
		setupEqualizer();
		// setupEqualizerFxAndUI();
		resetEQ();
		audioRecord.startRecording();
		Log.i(LOG_TAG, "Audio Recording started");
		audioTrack.setStereoVolume(AudioTrack.getMaxVolume(),
				AudioTrack.getMaxVolume());
		// audioTrack.attachAuxEffect(PresetReverb.PRESET_LARGEHALL);
		// audioTrack.setAuxEffectSendLevel(10);
		audioTrack.play();

		Log.i(LOG_TAG, "Audio Playing started");
		Rthread = new Thread(new Runnable() {
			public void run() {
				while (!Thread.interrupted()) {
					if (isRecording) {
						try {
							audioRecord.read(buffer, 0, bufferSize);
							// Log.i(LOG_TAG, "READ");
							audioTrack.write(buffer, 0, buffer.length);
							// Log.i(LOG_TAG, "       WRITE");

						} catch (Throwable t) {
							Log.e("Error", "Read write failed");
							t.printStackTrace();
						}
					}
				}
			}
		});
		// might need to read and write on different threads to get better
		// performance
		/*
		 * Wthread = new Thread(new Runnable() { public void run() { while
		 * (isRecording) { try { // audioRecord.read(buffer, 0, bufferSize);
		 * audioTrack.write(buffer, 0, buffer.length); Log.i(LOG_TAG,
		 * "       WRITE");
		 * 
		 * } catch (Throwable t) { Log.e("Error", "Read write failed");
		 * t.printStackTrace(); } } } });
		 */
		Rthread.start();
		// Wthread.start();

	}

	private void setupEqualizer() {
		// Create the Equalizer object (an AudioEffect subclass) and attach it
		// to our media player,
		// with a default priority (0).
		mEqualizer = new Equalizer(0, audioTrack.getAudioSessionId());
		mEqualizer.setEnabled(true);

		short bands = mEqualizer.getNumberOfBands();
		Log.d("AFX", "BAnds" + bands + "");
		final short minEQLevel = mEqualizer.getBandLevelRange()[0];
		final short maxEQLevel = mEqualizer.getBandLevelRange()[1];
		Log.i(LOG_TAG, "minEQLevel: " + minEQLevel);
		Log.i(LOG_TAG, "maxEQLevel: " + maxEQLevel);

		for (short i = 0; i < bands && i < 5; i++) {
			final short band = i;
			Log.d("AFX", "band: " + band + "");

			// Log.i(LOG_TAG, "band: "+band+" "+mEqualizer.);
			SeekBar bar = null;
			switch (i) {
			case 0:
				bar = (SeekBar) findViewById(R.id.sb_1);
				break;
			case 1:
				bar = (SeekBar) findViewById(R.id.sb_2);
			case 2:
				bar = (SeekBar) findViewById(R.id.sb_3);
				break;
			case 3:
				bar = (SeekBar) findViewById(R.id.sb_4);
				break;
			case 4:
				bar = (SeekBar) findViewById(R.id.sb_5);
				break;
			}

//			SeekBar bar = new SeekBar(this);
			bar.setMax(maxEQLevel - minEQLevel);
			bar.setProgress(mEqualizer.getBandLevel(band));
			bar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
				public void onProgressChanged(SeekBar seekBar, int progress,
						boolean fromUser) {
					mEqualizer.setBandLevel(band,
							(short) (progress + minEQLevel));
					// Log.d("EQ", "band: "+band+"  prog:"+progress);
				}
				public void onStartTrackingTouch(SeekBar seekBar) {
				}
				public void onStopTrackingTouch(SeekBar seekBar) {
					Log.d("EQ",
							"band: " + band + "  prog:" + seekBar.getProgress());
				}
			});
		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		if (audioTrack != null)
			audioTrack.release();
		if (audioRecord != null)
			audioRecord.release();
	}

	@Override
	protected void onResume() {
		super.onResume();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// generate menu
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.hearing_aid_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle menu item selection
		Intent intent;
		switch (item.getItemId()) {
		case R.id.help:
			intent = new Intent(ctx, About.class);
			ctx.startActivity(intent);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	/*
	 * creates EQ sliders on screen and attaches EQ to the AudioTrack
	 */
	private void setupEqualizerFxAndUI() {
		// Create the Equalizer object (an AudioEffect subclass) and attach it
		// to our media player,
		// with a default priority (0).
		mEqualizer = new Equalizer(0, audioTrack.getAudioSessionId());
		mEqualizer.setEnabled(true);
		// mLinearLayout.removeAllViews();
		TextView eqTextView = new TextView(this);
		// eqTextView.setText("Equalizer:");
		// mLinearLayout.addView(eqTextView);

		short bands = mEqualizer.getNumberOfBands();
		Log.d("AFX", "BAnds" + bands + "");
		final short minEQLevel = mEqualizer.getBandLevelRange()[0];
		final short maxEQLevel = mEqualizer.getBandLevelRange()[1];
		Log.i(LOG_TAG, "minEQLevel: " + minEQLevel);
		Log.i(LOG_TAG, "maxEQLevel: " + maxEQLevel);

		for (short i = 0; i < bands; i++) {
			final short band = i;
			Log.d("AFX", "band: " + band + "");

			TextView freqTextView = new TextView(this);
			freqTextView.setLayoutParams(new ViewGroup.LayoutParams(
					ViewGroup.LayoutParams.MATCH_PARENT,
					ViewGroup.LayoutParams.WRAP_CONTENT));
			freqTextView.setGravity(Gravity.CENTER_HORIZONTAL);
			freqTextView.setText((mEqualizer.getCenterFreq(band) / 1000)
					+ " Hz");
			// mLinearLayout.addView(freqTextView);
			// Log.i(LOG_TAG, "band: "+band+" "+mEqualizer.);

			LinearLayout row = new LinearLayout(this);
			row.setOrientation(LinearLayout.HORIZONTAL);

			TextView minDbTextView = new TextView(this);
			minDbTextView.setLayoutParams(new ViewGroup.LayoutParams(
					ViewGroup.LayoutParams.WRAP_CONTENT,
					ViewGroup.LayoutParams.WRAP_CONTENT));
			minDbTextView.setText((minEQLevel / 100) + " dB");

			TextView maxDbTextView = new TextView(this);
			maxDbTextView.setLayoutParams(new ViewGroup.LayoutParams(
					ViewGroup.LayoutParams.WRAP_CONTENT,
					ViewGroup.LayoutParams.WRAP_CONTENT));
			maxDbTextView.setText((maxEQLevel / 100) + " dB");

			LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
					ViewGroup.LayoutParams.MATCH_PARENT,
					ViewGroup.LayoutParams.WRAP_CONTENT);
			layoutParams.weight = 1;
			SeekBar bar = new SeekBar(this);
			bar.setLayoutParams(layoutParams);
			bar.setMax(maxEQLevel - minEQLevel);
			bar.setProgress(mEqualizer.getBandLevel(band));

			bar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
				public void onProgressChanged(SeekBar seekBar, int progress,
						boolean fromUser) {
					mEqualizer.setBandLevel(band,
							(short) (progress + minEQLevel));
					// Log.d("EQ", "band: "+band+"  prog:"+progress);

				}

				public void onStartTrackingTouch(SeekBar seekBar) {
				}

				public void onStopTrackingTouch(SeekBar seekBar) {
					Log.d("EQ",
							"band: " + band + "  prog:" + seekBar.getProgress());

				}
			});

			// row.addView(minDbTextView);
			// row.addView(bar);
			// row.addView(maxDbTextView);

			// mLinearLayout.addView(row);
		}
	}

}
