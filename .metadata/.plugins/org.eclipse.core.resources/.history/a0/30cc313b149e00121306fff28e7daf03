/*
 * This class records audio from the device's mic to a buffer and uses AudioTrack to play that buffer.
 */

package com.capstone.hearingtest;

import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.media.audiofx.Equalizer;
import android.media.audiofx.PresetReverb;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.ToggleButton;

public class AudioTrackTest extends Activity {
	private static final String LOG_TAG = "AudioRecordTest";
	// private static String mFileName = null;
	private Context ctx = this;
	private ToggleButton mRecordButton = null;
	private ToggleButton mPlayButton = null;
	private MediaPlayer mPlayer = null;
	private Boolean isRecording = null;
    private Equalizer mEqualizer;
    private LinearLayout mLinearLayout;
	
    
	private int freq = 44100;
	private AudioRecord audioRecord = null;
	private Thread Rthread = null;
	private Thread Wthread = null;

	private AudioManager audioManager = null;
	private AudioTrack audioTrack = null;
	byte[] buffer = new byte[freq];
	public static final int AUDIO_ENCODING = AudioFormat.ENCODING_PCM_16BIT;

	// The different audio codecs
	// int AAC AAC Low Complexity (AAC-LC) audio codec
	// int AAC_ELD Enhanced Low Delay AAC (AAC-ELD) audio codec
	// int AMR_NB AMR (Narrowband) audio codec
	// int AMR_WB AMR (Wideband) audio codec
	// int DEFAULT
	// int HE_AAC High Efficiency AAC (HE-AAC) audio codec
	private int AudioCodec = MediaRecorder.AudioEncoder.AMR_WB;
    
    
    
    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.record);
		mRecordButton = (ToggleButton) findViewById(R.id.tbtn_record);
		mPlayButton = (ToggleButton) findViewById(R.id.tbtn_play);
		mLinearLayout = (LinearLayout) findViewById(R.id.ll_EQ);
		// mFileName =
		// Environment.getExternalStorageDirectory().getAbsolutePath();
		// mFileName += "/audiorecordtest.3gp";

		mRecordButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				Log.d(LOG_TAG, mRecordButton.isChecked() + " rec btn");
				// onRecord(mRecordButton.isChecked());
				if (isRecording == null){
					Start();
				}else if (isRecording) {
					isRecording = false;
					Rthread.interrupt();
//					audioTrack.stop();
				} else {
					isRecording = true;
//					Rthread.notify();
					Rthread.start();// = null;
//					Start();
//					audioTrack.play();
				}
			}
		});
		mPlayButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				Log.d(LOG_TAG, mRecordButton.isChecked() + " play btn");
				// onPlay(mPlayButton.isChecked());
				Intent intent = new Intent(ctx, AudioFxDemo.class);

				ctx.startActivity(intent);
			}
		});

	}



	protected void Start(){
		loopback();
	}

	protected void loopback() {

		android.os.Process
				.setThreadPriority(android.os.Process.THREAD_PRIORITY_URGENT_AUDIO);
		final int bufferSize = AudioRecord.getMinBufferSize(freq,
				AudioFormat.CHANNEL_IN_MONO,
				AudioFormat.ENCODING_PCM_16BIT);
		Log.i(LOG_TAG, "BufferSize: " + bufferSize);

		audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC, freq,
				AudioFormat.CHANNEL_IN_MONO, AudioCodec, bufferSize);
		// ENCODING_PCM_16BIT
		audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC, freq,
				AudioFormat.CHANNEL_OUT_MONO, AudioCodec, bufferSize,
				AudioTrack.MODE_STREAM);

		audioTrack.setPlaybackRate(freq);
		final byte[] buffer = new byte[bufferSize];
		setupEqualizerFxAndUI(); 

		audioRecord.startRecording();
		Log.i(LOG_TAG, "Audio Recording started");
		audioTrack.setStereoVolume(AudioTrack.getMaxVolume(),
				AudioTrack.getMaxVolume());
		// audioTrack.attachAuxEffect(PresetReverb.PRESET_LARGEHALL);
		// audioTrack.setAuxEffectSendLevel(10);
		audioTrack.play();

		Log.i(LOG_TAG, "Audio Playing started");
		Rthread = new Thread(new Runnable() {
			public void run() {
				while (!Thread.interrupted()) {
					try {
						audioRecord.read(buffer, 0, bufferSize);
//						Log.i(LOG_TAG, "READ");
						audioTrack.write(buffer, 0, buffer.length);
//						Log.i(LOG_TAG, "       WRITE");

					} catch (Throwable t) {
						Log.e("Error", "Read write failed");
						t.printStackTrace();
					}
				}
			}
		});
//		might need to read and write on different threads to get better performance
	/*	Wthread = new Thread(new Runnable() {
			public void run() {
				while (isRecording) {
					try {
//						audioRecord.read(buffer, 0, bufferSize);
						audioTrack.write(buffer, 0, buffer.length);
						Log.i(LOG_TAG, "       WRITE");

					} catch (Throwable t) {
						Log.e("Error", "Read write failed");
						t.printStackTrace();
					}
				}
			}
		});
		*/
		Rthread.start();
//		Wthread.start();
		
	}
	
	
	
	
	/*
	 * creates EQ sliders on screen and attaches EQ to the AudioTrack
	 */
	 private void setupEqualizerFxAndUI() {
	        // Create the Equalizer object (an AudioEffect subclass) and attach it to our media player,
	        // with a default priority (0).
	        mEqualizer = new Equalizer(0, audioTrack.getAudioSessionId());
	        mEqualizer.setEnabled(true);
	        mLinearLayout.removeAllViews();
	        TextView eqTextView = new TextView(this);
	        eqTextView.setText("Equalizer:");
	        mLinearLayout.addView(eqTextView);

	        short bands = mEqualizer.getNumberOfBands();
	        Log.d("AFX", "BAnds"+bands+"");
	        final short minEQLevel = mEqualizer.getBandLevelRange()[0];
	        final short maxEQLevel = mEqualizer.getBandLevelRange()[1];
	        Log.i(LOG_TAG, "minEQLevel: "+minEQLevel);
	        Log.i(LOG_TAG, "maxEQLevel: "+maxEQLevel);
	        
	        for (short i = 0; i < bands; i++) {
	            final short band = i;
	            Log.d("AFX", "band: "+band+"");

	            TextView freqTextView = new TextView(this);
	            freqTextView.setLayoutParams(new ViewGroup.LayoutParams(
	                    ViewGroup.LayoutParams.MATCH_PARENT,
	                    ViewGroup.LayoutParams.WRAP_CONTENT));
	            freqTextView.setGravity(Gravity.CENTER_HORIZONTAL);
	            freqTextView.setText((mEqualizer.getCenterFreq(band) / 1000) + " Hz");
	            mLinearLayout.addView(freqTextView);
//		        Log.i(LOG_TAG, "band: "+band+" "+mEqualizer.);

	            LinearLayout row = new LinearLayout(this);
	            row.setOrientation(LinearLayout.HORIZONTAL);

	            TextView minDbTextView = new TextView(this);
	            minDbTextView.setLayoutParams(new ViewGroup.LayoutParams(
	                    ViewGroup.LayoutParams.WRAP_CONTENT,
	                    ViewGroup.LayoutParams.WRAP_CONTENT));
	            minDbTextView.setText((minEQLevel / 100) + " dB");

	            TextView maxDbTextView = new TextView(this);
	            maxDbTextView.setLayoutParams(new ViewGroup.LayoutParams(
	                    ViewGroup.LayoutParams.WRAP_CONTENT,
	                    ViewGroup.LayoutParams.WRAP_CONTENT));
	            maxDbTextView.setText((maxEQLevel / 100) + " dB");

	            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
	                    ViewGroup.LayoutParams.MATCH_PARENT,
	                    ViewGroup.LayoutParams.WRAP_CONTENT);
	            layoutParams.weight = 1;
	            SeekBar bar = new SeekBar(this);
	            bar.setLayoutParams(layoutParams);
	            bar.setMax(maxEQLevel - minEQLevel);
	            bar.setProgress(mEqualizer.getBandLevel(band));

	            bar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
	                public void onProgressChanged(SeekBar seekBar, int progress,
	                        boolean fromUser) {
	                    mEqualizer.setBandLevel(band, (short) (progress + minEQLevel));
	                }

	                public void onStartTrackingTouch(SeekBar seekBar) {}
	                public void onStopTrackingTouch(SeekBar seekBar) {}
	            });

	            row.addView(minDbTextView);
	            row.addView(bar);
	            row.addView(maxDbTextView);

	            mLinearLayout.addView(row);
	        }
	    }
	
	
	
	
	
	
}
